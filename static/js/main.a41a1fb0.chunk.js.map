{"version":3,"sources":["Components/TodoList/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["Todolist","props","date","Date","h","getHours","slice","m","getMinutes","s","getSeconds","todolist","handleInsert","handleDelete","handleUpdate","useState","input","setInput","search","setSearch","list","setList","update","useRef","useEffect","result","filter","todo","name","indexOf","className","onChange","e","target","value","onHandleSearch","type","placeholder","handleChangeValue","disabled","onClick","btn","document","querySelector","innerText","jobValue","id","v4","time","isComplete","onHandleInsert","current","onHandleUpdate","map","index","findIndex","item","onHandleInput","defaultProps","App","setTodolist","localStorage","getItem","JSON","parse","setItem","stringify","job","newTodolist","splice","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a41a1fb0.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './Todolist.css'\r\nimport PropTypes from 'prop-types';\r\nimport { MdSystemUpdate } from 'react-icons/md'\r\nimport { AiFillDelete } from 'react-icons/ai'\r\nimport {v4}  from 'uuid'\r\n\r\nTodolist.propTypes = {\r\n    todolist : PropTypes.array,\r\n    handleInsert: PropTypes.func,\r\n    handleDelete: PropTypes.func,\r\n    handleUpdate: PropTypes.func,\r\n};\r\n\r\nTodolist.defaultProps = {\r\n    todolist: [],\r\n    handleInsert: null,\r\n    handleDelete: null,\r\n    handleUpdate:null,\r\n}\r\n\r\nfunction Todolist(props) {\r\n\r\n    const date = new Date();\r\n    const h = `0${date.getHours()}`.slice(-2);\r\n    const m = `0${date.getMinutes()}`.slice(-2);\r\n    const s = `0${date.getSeconds()}`.slice(-2);\r\n\r\n    let {todolist,handleInsert,handleDelete,handleUpdate} = props\r\n\r\n    const [input,setInput] = useState('');\r\n    const [search,setSearch] = useState('')\r\n    const [list,setList] = useState([...todolist])\r\n\r\n    const update = useRef([]);\r\n\r\n    const handleChangeValue =  (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const onHandleInsert = () => {\r\n        if(handleInsert){\r\n            const jobValue = {\r\n                id:v4(),\r\n                name:input,\r\n                time: `${h} : ${m} : ${s}`,\r\n                isComplete:false\r\n            }\r\n            handleInsert(jobValue);\r\n            setInput('');\r\n        }\r\n    }\r\n\r\n    const onHandleDelete = (id)=>{\r\n        if(handleDelete){\r\n            handleDelete(id);\r\n        }\r\n    }\r\n\r\n\r\n    const onHandleInput= (id) => {\r\n        const btn = document.querySelector('.submit');\r\n        btn.innerText = 'Update'\r\n\r\n        const index = todolist.findIndex(item => item.id === id);\r\n      \r\n        setInput(todolist[index].name);\r\n\r\n        update.current = {\r\n            ...todolist[index],\r\n        }\r\n\r\n        \r\n    }\r\n    \r\n    const onHandleUpdate =() => {\r\n        if(handleUpdate){\r\n            const jobValue = {\r\n                ...update.current,\r\n                name: input,\r\n                time: `${h} : ${m} : ${s}`,\r\n            }    \r\n\r\n            handleUpdate(update.current.id,jobValue);\r\n            setInput('')\r\n        }\r\n    }\r\n\r\n    const onHandleSearch =(e) =>{\r\n            setSearch(e.target.value)\r\n            \r\n    }\r\n\r\n    useEffect(() => {\r\n        const result = todolist.filter((todo) => {\r\n            return todo.name.indexOf(search) !== -1\r\n        })     \r\n\r\n        setList(result);\r\n    },[search,todolist])\r\n\r\n    const handle = () => {\r\n        const btn = document.querySelector('.submit');\r\n        \r\n        if (btn.innerText === 'Insert') {\r\n            onHandleInsert()\r\n        }else{\r\n           onHandleUpdate()\r\n           btn.innerText= 'Insert'\r\n        }\r\n    \r\n    }\r\n    \r\n    return (\r\n        <div className=\"body\">\r\n            <div className=\"content\">\r\n                <h2>DANH SÁCH CẦN LÀM NÈ BÀ CON</h2>\r\n                <input onChange={(e)=>onHandleSearch(e)} value={search} type=\"text\" placeholder=\"Nhập để tìm kiếm ...\" />\r\n                <ul className=\"todo__list\">\r\n                    <div className=\"insert__box\">\r\n                        <input onChange={(e) => handleChangeValue (e)} value={input} placeholder=\"Nhập công việc cần thêm\" type=\"text\" />\r\n                        <button className=\"submit\" disabled={!input} onClick={handle}>Insert</button>\r\n                    </div>\r\n                  \r\n                    {\r\n                        list.map((todo) => {\r\n                            return (\r\n                            <li key={todo.id}>\r\n                                <div>\r\n                                    {todo.name}\r\n                                    <p>{todo.time}</p>\r\n                                </div>\r\n                                <div>\r\n                                    <i onClick={() => onHandleInput(todo.id)}>\r\n                                        <MdSystemUpdate />\r\n                                    </i>\r\n                                    <i onClick={() => onHandleDelete(todo.id)}>\r\n                                         <AiFillDelete  />\r\n                                    </i>\r\n                                </div>\r\n                            </li>\r\n                            )\r\n                        })\r\n                    }\r\n                \r\n                </ul> \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todolist;","\nimport { useEffect, useState } from 'react';\nimport Todolist from './Components/TodoList';\n\n\n\nfunction App() {\n\n  const [todolist,setTodolist] = useState([]);\n\n\n  useEffect(() => {\n    if (localStorage.getItem('list')) {\n      setTodolist(JSON.parse(localStorage.getItem('list')))\n    }\n  },[])\n\n  useEffect(() => {\n    localStorage.setItem('list',JSON.stringify(todolist));\n  },[todolist])\n \n\n  const handleInsert = (jobValue) => {\n    todolist.unshift({\n      ...jobValue\n    })\n\n  const newTodolist = [...todolist];\n\n  setTodolist(newTodolist)\n\n  }\n\n  const handleUpdate = (id,jobValue) => {\n    const index = todolist.findIndex(item => item.id === id);\n\n    todolist[index] = {\n      ...jobValue\n    }\n\n    const newTodolist = [...todolist];\n\n    setTodolist(newTodolist)\n  }\n\n  const handleDelete = (id) => {\n    const index = todolist.findIndex(item => item.id === id);\n\n    todolist.splice(index,1);\n\n    const newTodolist = [...todolist];\n\n    setTodolist(newTodolist);\n  }\n\n\n\n  return (\n    <div>\n      <Todolist  handleUpdate={(id,job) => handleUpdate(id,job)} handleDelete={(id) => handleDelete(id)} handleInsert={(job) => handleInsert(job)} todolist = {todolist} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}